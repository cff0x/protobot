// generated by ./ddl2cpp /mnt/f/Development/Discord/protobot/sql/bot_options.sql test.cpp protobot
#ifndef PROTOBOT_BOT_OPTIONS_H
#define PROTOBOT_BOT_OPTIONS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace protobot
{
    namespace BotOptions_
    {
        struct Option
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "option";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T option;
                    T& operator()() { return option; }
                    const T& operator()() const { return option; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
        };
        struct Value
        {
            struct _alias_t
            {
                static constexpr const char _literal[] =  "value";
                using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
                template<typename T>
                struct _member_t
                {
                    T value;
                    T& operator()() { return value; }
                    const T& operator()() const { return value; }
                };
            };
            using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
        };
    } // namespace BotOptions_

    struct BotOptions: sqlpp::table_t<BotOptions,
            BotOptions_::Option,
            BotOptions_::Value>
    {
        struct _alias_t
        {
            static constexpr const char _literal[] =  "bot_options";
            using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
            template<typename T>
            struct _member_t
            {
                T botOptions;
                T& operator()() { return botOptions; }
                const T& operator()() const { return botOptions; }
            };
        };
    };
} // namespace protobot
#endif